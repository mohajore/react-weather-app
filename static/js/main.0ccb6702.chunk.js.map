{"version":3,"sources":["Component/Form.js","Component/Wather.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","onSubmit","getWeather","type","name","placeholder","Weather","keys","this","key","temperature","className","city","country","humidity","description","error","Component","API_KEY","App","state","e","a","preventDefault","target","elements","value","fetch","api","json","data","console","log","setState","Math","round","main","temp","sys","weather","gradient","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAceA,EAXA,SAACC,GAEZ,OACE,uBAAOC,SAAUD,EAAME,WAAvB,UACI,uBAAQC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC5C,uBAASF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,qDCgCGC,E,4JArCb,WACE,OACE,sBAAKC,KAAMC,KAAKR,MAAMS,IAAtB,UAGID,KAAKR,MAAMU,aAAgB,CAC5B,sBAAKC,UAAU,OAAf,UACG,oBAAGA,UAAU,WAAb,oBACA,uBAAOA,UAAU,aAAjB,UAA+BH,KAAKR,MAAMU,YAA1C,cAEA,oBAAGC,UAAU,WAAb,mBACA,sBAAOA,UAAU,aAAjB,SAA+BH,KAAKR,MAAMY,UAE1C,oBAAGD,UAAU,WAAb,sBACA,sBAAOA,UAAU,aAAjB,SAA+BH,KAAKR,MAAMa,aAE1C,oBAAGF,UAAU,WAAb,uBACA,sBAAOA,UAAU,aAAjB,SAA+BH,KAAKR,MAAMc,cAE1C,oBAAGH,UAAU,WAAb,0BACA,sBAAOA,UAAU,aAAjB,SAA+BH,KAAKR,MAAMe,qBAO1C,mBAAGJ,UAAU,WAAb,SACA,sBAAOA,UAAU,aAAjB,SAA+BH,KAAKR,MAAMgB,iB,GA7BhCC,aCMhBC,EAAW,mCAoEFC,E,4MAhEbC,MAAO,CAELV,YAAY,GACZE,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,YAAY,GACZC,MAAM,I,EAGVd,W,uCAAa,WAAOmB,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBAEIX,EAAOS,EAAEG,OAAOC,SAASb,KAAKc,MAC9Bb,EAAUQ,EAAEG,OAAOC,SAASZ,QAAQa,MAJ/B,SAKOC,MAAM,oDAAD,OAAqDf,EAArD,cAA+DC,EAA/D,kBAAgFK,IAL5F,cAKLU,EALK,gBAMQA,EAAIC,OANZ,OAMLC,EANK,OAOXC,QAAQC,IAAIF,GACVlB,GAAQC,EACV,EAAKoB,SAAS,CACZvB,YAAYwB,KAAKC,MAAOL,EAAKM,KAAKC,KAAM,QACxCzB,KAAKkB,EAAK1B,KACVS,QAAQiB,EAAKQ,IAAIzB,QACjBC,SAASgB,EAAKM,KAAKtB,SACnBC,YAAYe,EAAKS,QAAQ,GAAGxB,cAGtBH,GAAQC,EAAU,EAAKoB,SAAS,CACxCvB,YAAY,GACZE,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,YAAY,GACZC,MAAM,kCAGA,EAAKiB,SAAS,CACpBvB,YAAY,GACZE,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,YAAY,GACXC,MAAM,0CAhCI,4C,kGAoCX,WACE,OACE,qBAAML,UAAU,cAAa6B,UAAQ,EAArC,SACE,sBAAK7B,UAAU,iBAAf,UACI,cAAC,EAAD,CAAMT,WAAYM,KAAKN,aACvB,cAAC,EAAD,CACCQ,YAAaF,KAAKY,MAAMV,YACxBE,KAAMJ,KAAKY,MAAMR,KACjBC,QAASL,KAAKY,MAAMP,QACpBC,SAAUN,KAAKY,MAAMN,SACrBC,YAAaP,KAAKY,MAAML,YACxBC,MAAOR,KAAKY,MAAMJ,iB,GA3DbC,aCCHwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0ccb6702.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n const  Form = (props)=> {\r\n  \r\n    return (\r\n      <form  onSubmit={props.getWeather}>\r\n          <input  type='text' name='city' placeholder='City...'/>\r\n          <input   type='text' name='country' placeholder='Country...'/>\r\n            <button >Get Weather</button>\r\n      </form>\r\n    );\r\n  }\r\n\r\nexport default Form;","import React, {Component} from 'react';\r\n\r\n\r\nclass Weather extends Component {\r\n  render() {\r\n    return (\r\n      <div keys={this.props.key}>\r\n        \r\n        {\r\n          this.props.temperature &&  [  \r\n         <div className='info'> \r\n            <p className='info-key'>Temp  :\r\n            <span  className='info-value'>{this.props.temperature}Â°C</span>\r\n            </p>\r\n            <p className='info-key'>City :\r\n            <span  className='info-value'>{this.props.city}</span>\r\n            </p>\r\n            <p className='info-key'>Country :\r\n            <span  className='info-value'>{this.props.country}</span>\r\n            </p>\r\n            <p className='info-key'>Humidity :\r\n            <span  className='info-value'>{this.props.humidity}</span>\r\n            </p>\r\n            <p className='info-key'>Description :\r\n            <span  className='info-value'>{this.props.description}</span>\r\n            </p>\r\n        \r\n         </div>\r\n          \r\n          ]\r\n          }\r\n            <p className='info-key'>\r\n            <span  className='info-value'>{this.props.error}</span>\r\n            </p>\r\n         \r\n         \r\n          \r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Weather;","import React, {Component} from 'react';\nimport './App.css';\nimport Form from './Component/Form';\nimport Weather from './Component/Wather';\n\n\n\n\n\nconst API_KEY  = \"d7d025d329be99cbcb59a33fd66c023d\"\n// http://api.openweathermap.org/data/2.5/weather?q=cairo%2Cegypt&appid=e36ed364400282e43250b6c4c0274d44\nclass App extends Component {\n\n  state ={\n    \n    temperature:'',\n    city:'',\n    country:'',\n    humidity:'',\n    description:'',\n    error:'',\n  }\n\ngetWeather = async (e)=>{\n  e.preventDefault();\n  // console.log(\"weather\");\n  const city = e.target.elements.city.value\n  const country = e.target.elements.country.value\n  const api = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}%2C${country}&appid=${API_KEY}`)\n  const data = await api.json()\n  console.log(data);\n if(city && country){\n  this.setState({\n    temperature:Math.round((data.main.temp)-273.15),\n    city:data.name,\n    country:data.sys.country,\n    humidity:data.main.humidity,\n    description:data.weather[0].description,\n    \n  })\n }else if(city || country){ this.setState({\n  temperature:'',\n  city:'',\n  country:'',\n  humidity:'',\n  description:'',\n  error:'Please enter full information',\n })\n\n }else{ this.setState({\n  temperature:'',\n  city:'',\n  country:'',\n  humidity:'',\n  description:'',\n   error:'Please enter the city and the country',\n})}\n}\n\n  render() {\n    return (\n      <div  className=\"wrapper id=\"gradient>\n        <div className=\"form-container\">\n            <Form getWeather={this.getWeather}/>\n            <Weather  \n             temperature={this.state.temperature}\n             city={this.state.city}\n             country={this.state.country}\n             humidity={this.state.humidity}\n             description={this.state.description}\n             error={this.state.error}\n            />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}